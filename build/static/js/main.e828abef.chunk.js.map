{"version":3,"sources":["store.js","components/Products.js","components/Categories.js","components/Header.js","components/Footer.js","App.js","index.js"],"names":["initState","cart","total","categories","name","displayName","products","description","stock","price","category","selected","currentCategory","createStore","state","action","newState","type","payload","connect","props","productsHTML","i","length","push","Card","key","className","CardContent","Typography","color","gutterBottom","component","CardActions","Button","size","categoriesHTML","variant","onClick","e","dispatch","Footer","id","href","target","src","alt","App","store","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e828abef.chunk.js","sourcesContent":["// xx - define the initial state\n// define the reducer\n// -- defining the action types\n// -- define the behavior for each action type\n// redux magic to combine the init state and reducer into a redux store\n\n// useState(initState)\n// this.state = initState\n\nimport { createStore } from 'redux';\n\nconst initState = {\n    cart: 0,\n    total: 0,\n    categories: [\n        { name: 'electronics', displayName: 'Electronics' },\n        { name: 'food', displayName: '' },\n    ],\n    products: [\n        {\n            name: 'TV',\n            description: 'See all the things',\n            stock: 5,\n            price: 400,\n            category: 'electronics',\n            selected: false,\n        },\n        {\n            name: 'Macbook',\n            description: 'Do all the things',\n            stock: 7,\n            price: 1200,\n            category: 'electronics',\n            selected: false,\n        },\n        {\n            name: 'Carrot',\n            description: 'Crunch all the things',\n            stock: 25,\n            price: 0.3,\n            category: 'food',\n            selected: false,\n        },\n        {\n            name: 'Cake',\n            description: 'Lie all the things',\n            stock: 10,\n            price: 5,\n            category: 'food',\n            selected: false,\n        },\n    ],\n    currentCategory: 'food',\n};\n\nconst reducer = (state = initState, action) => {\n    // state = the current state (non mutable)\n    // action = an object containing type and payload\n\n    let newState = { ...state };\n\n    switch (action.type) {\n        // define our application's acceptable actions\n\n        case 'ADD_TO_CART':\n            newState.cart = action.payload;\n            newState.total = action.payload;\n            break;\n        case 'CHANGE_CATEGORY':\n            newState.currentCategory = action.payload;\n            break;\n        default:\n            break;\n    }\n\n    return newState;\n};\n\nexport default createStore(reducer);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\n\nfunction Products(props) {\n    // list all the products that belong to the\n    // current selected category\n\n    // only show the products that belong to the current category\n\n    let productsHTML = [];\n\n    for (let i = 0; i < props.products.length; i++) {\n        if (props.products[i].category === props.currentCategory)\n            productsHTML.push(\n                <Card key={i} className=\"Card\" >\n                    <CardContent >\n                        <Typography className=\"card-title\" color=\"textSecondary\" gutterBottom>\n                            {props.products[i].name}\n                        </Typography>\n                        <Typography >\n                            ${props.products[i].price}\n                        </Typography>\n                        <Typography color=\"textSecondary\" component=\"p\">\n                            {props.products[i].description}\n                        </Typography>\n                    </CardContent>\n                    <CardActions >\n                        <Button size=\"small\">Add to Cart</Button>\n                        <Button size=\"small\" color=\"primary\">View Details</Button>\n                    </CardActions>\n                </Card>\n            );\n    }\n\n\n\n    return (\n        <><div className ='main-product'>\n            <h2>Products</h2>\n            {productsHTML}\n            </div>\n        </>\n    );\n}\n\n// connect() --> returns a function (assume it's called foo)\n// let foo = connect(mapStateToProps);\n// let connectedComponent = foo(Products)\n// export default connectedComponent\n\nconst mapStateToProps = (state) => {\n    return {\n        products: state.products,\n        currentCategory: state.currentCategory,\n    };\n};\n\nexport default connect(mapStateToProps)(Products);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from '@material-ui/core';\n\nfunction Categories(props) {\n    let categoriesHTML = [];\n\n    for (let i = 0; i < props.categories.length; i++)\n        categoriesHTML.push(\n            <Button\n                variant='contained'\n                color='secondary'\n                key={i}\n                onClick={(e) => {\n                    // change the current category\n                    props.dispatch({\n                        type: 'CHANGE_CATEGORY',\n                        payload: props.categories[i].name,\n                    });\n                }}\n            >\n                {props.categories[i].displayName || props.categories[i].name}\n            </Button>,\n        );\n\n    return <><div className ='main-category'>{categoriesHTML}</div></>;\n}\n\nconst mapStateToProps = (state) => {\n    return {\n        categories: state.categories,\n    };\n};\n\nexport default connect(mapStateToProps)(Categories);\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nfunction Header(props) {\n  return (\n    <header>\n      <h1>401 Store</h1>\n      <p>Cart ({props.cart})</p>\n    </header>\n  )\n}\n\nconst mapStateToProps = (state) => {\n  return {\n      cart: state.cart,\n  };\n};\n\nexport default connect(mapStateToProps)(Header);","import React from 'react';\nexport default function Footer() {\n  return (\n    <footer>\n      <div id=\"external-account\">\n        <h1>Shubham Majumdar</h1>\n        <a href='https://www.linkedin.com/in/majumdar-shubham' target='_blank'>\n          <img src={'/assets/linkedin.jpg'} alt={'LinkedIn'} />\n        </a>\n        <a href='https://github.com/smajumdar22' target='_blank'>\n          <img src={'/assets/github.png'} alt={'GitHub'} />\n        </a>\n      </div>\n    </footer>\n  )\n}","import React from 'react';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport './styles/styles.scss';\n\nimport Products from './components/Products';\nimport Categories from './components/Categories';\nimport Header from './components/Header';\nimport Footer from './components/Footer';\n\n// Connecting our app to our global state redux store\n// xx Wrap the whole app in a \"store provider\"\n// -- Pick individual components to \"connect\" and become \"consumers\"\n\nfunction App() {\n    return (\n        <Provider store={store}>\n            <div className='App'>\n                <Header />\n                <Categories />\n                <Products />\n                <Footer />\n            </div>\n        </Provider>\n    );\n}\n\nexport default App;\n"," import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n"],"sourceRoot":""}